[1,["dclXHtiyRCAqN8IVgsaVH+"],["_effectAsset"],[["cc.Material",["_name","_techniqueData"],1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,3],[1,0,1,2,4]],[[[[0,"mosaicPhoto",{"0":{"props":{"xBlockCount":20,"yBlockCount":20},"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[0],[0]],[[[1,"mosaic",[{"hash":3248553871,"name":"mosaic|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n","frag":"\n precision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n in vec4 v_color;\n\n #if USE_TEXTURE\n in vec2 v_uv0;\n uniform sampler2D texture;\n #endif\n\n uniform Mosaic {\n   float xBlockCount;\n   float yBlockCount;\n }\n\n/**\n * 获取v_uv0最终映射的马赛克格子的坐标\n */\n vec2 getUvMapPos() {\n\n   float xCount;\n   if (xBlockCount <= 0.0) {\n     xCount = 1.0;\n   } else {\n     xCount = xBlockCount;\n   }\n   float blockWidth = 1.0 / xCount;\n\n   float blockXIndex = floor(v_uv0.x / blockWidth);\n\n   float yCount;\n   if (yBlockCount <= 0.0) {\n     yCount = 1.0;\n   } else {\n     yCount = yBlockCount;\n   }\n   float blockHeight = 1.0 / yCount;\n   float blockYIndex = floor(v_uv0.y / blockHeight);\n\n   return vec2(blockWidth * (blockXIndex + 0.5), blockHeight * (blockYIndex + 0.5));\n }\n\n void main () {\n   vec4 o = vec4(1.5, 1.5, 1.5, 1);\n\n   vec2 realPos = getUvMapPos();\n\n   #if USE_TEXTURE\n   o *= texture(texture, v_uv0);\n     #if CC_USE_ALPHA_ATLAS_TEXTURE\n\n     o.a *= texture2D(texture, realPos + vec2(0, 0.5)).r*0.0;\n\n     #endif\n   #endif\n\n   o *= v_color;\n\n   ALPHA_TEST(o);\n\n   gl_FragColor = o;\n }\n"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n","frag":"\n precision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n varying vec4 v_color;\n\n #if USE_TEXTURE\n varying vec2 v_uv0;\n uniform sampler2D texture;\n #endif\n\n uniform float xBlockCount;\nuniform float yBlockCount;\n/**\n * 获取v_uv0最终映射的马赛克格子的坐标\n */\n vec2 getUvMapPos() {\n\n   float xCount;\n   if (xBlockCount <= 0.0) {\n     xCount = 1.0;\n   } else {\n     xCount = xBlockCount;\n   }\n   float blockWidth = 1.0 / xCount;\n\n   float blockXIndex = floor(v_uv0.x / blockWidth);\n\n   float yCount;\n   if (yBlockCount <= 0.0) {\n     yCount = 1.0;\n   } else {\n     yCount = yBlockCount;\n   }\n   float blockHeight = 1.0 / yCount;\n   float blockYIndex = floor(v_uv0.y / blockHeight);\n\n   return vec2(blockWidth * (blockXIndex + 0.5), blockHeight * (blockYIndex + 0.5));\n }\n\n void main () {\n   vec4 o = vec4(1.5, 1.5, 1.5, 1);\n\n   vec2 realPos = getUvMapPos();\n\n   #if USE_TEXTURE\n   o *= texture2D(texture, v_uv0);\n     #if CC_USE_ALPHA_ATLAS_TEXTURE\n\n     o.a *= texture2D(texture, realPos + vec2(0, 0.5)).r*0.0;\n\n     #endif\n   #endif\n\n   o *= v_color;\n\n   ALPHA_TEST(o);\n\n   gl_FragColor = o;\n }\n"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Mosaic","binding":1,"members":[{"name":"xBlockCount","type":13,"count":1},{"name":"yBlockCount","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}],"dependencies":{}}],[{"passes":[{"program":"mosaic|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"xBlockCount":{"type":13,"value":[30],"editor":{"tooltip":"X轴方向马赛克方块的数量"}},"yBlockCount":{"type":13,"value":[30],"editor":{"tooltip":"Y轴方向马赛克方块的数量"}}}}]}]]],0,0,[],[],[]]]]
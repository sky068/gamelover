{"version":3,"sources":["project.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","Game","module","cc","_RFpush","Class","extends","Component","properties","starPrefab","default","type","Prefab","labelPrefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","url","AudioClip","onLoad","this","timer","starDuration","beginGame","groundY","height","spawnNewStar","score","random0To1","newStar","instantiate","node","addChild","setPosition","getNewStarPositon","getComponent","game","randX","randY","jumpHeight","maxX","width","randomMinus1To1","p","gainScore","string","toString","audioEngine","playEffect","update","dt","gameOver","stopAllActions","gameoverLabel","scaleTo","callback","callFunc","destroy","director","loadScene","runAction","sequence","_RFpop","Player","jumpDuration","maxMoveSpeed","accel","jumpAudio","setJumpAction","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","playJumpSound","repeatForever","setInputControl","self","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","left","accLeft","accRight","d","right","onKeyReleased","jumpAction","xSpeed","Math","abs","x","console","log","Star","pickRadius","getPlayerDistance","playerPos","getPosition","dist","pDistance","position","onPicked","opacityRatio","minOpacity","opacity","floor"],"mappings":"AAAAA,QAAQ,QAAUC,GAAEC,EAAEC,EAAEC,GAAG,QAASC,GAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,GAAIE,GAAkB,kBAATR,UAAqBA,OAAQ,KAAIO,GAAGC,EAAE,MAAOA,GAAEF,GAAE,EAAI,IAAGG,EAAE,MAAOA,GAAEH,GAAE,EAAI,IAAII,GAAE,GAAIC,OAAM,uBAAuBL,EAAE,IAAK,MAAMI,GAAEE,KAAK,mBAAmBF,EAAE,GAAIG,GAAEV,EAAEG,IAAIQ,WAAYZ,GAAEI,GAAG,GAAGS,KAAKF,EAAEC,QAAQ,SAASb,GAAG,GAAIE,GAAED,EAAEI,GAAG,GAAGL,EAAG,OAAOI,GAAEF,EAAEA,EAAEF,IAAIY,EAAEA,EAAEC,QAAQb,EAAEC,EAAEC,EAAEC,GAAG,MAAOD,GAAEG,GAAGQ,QAAkD,IAAI,GAA1CL,GAAkB,kBAATT,UAAqBA,QAAgBM,EAAE,EAAEA,EAAEF,EAAEY,OAAOV,IAAID,EAAED,EAAEE,GAAI,OAAOD,KAAKY,MAAQ,SAASjB,EAAQkB,EAAOJ,GACpeK,GAAGC,QAAQF,EAAQ,0BAA2B,QAK9CC,GAAGE,OACCC,UAAWH,GAAGI,UAEdC,YAWIC,YACIC,UAAW,KACXC,KAAMR,GAAGS,QAIbC,aACIH,UAAW,KACXC,KAAMR,GAAGS,QAGbE,gBAAiB,EACjBC,gBAAiB,EAEjBC,QACIN,UAAW,KACXC,KAAMR,GAAGc,MAGbC,QACIR,UAAW,KACXC,KAAMR,GAAGc,MAGbE,cACIT,UAAW,KACXC,KAAMR,GAAGiB,OAEbC,YACIX,UAAW,KACXY,IAAKnB,GAAGoB,YAKhBC,OAAQ,WAEJC,KAAKC,MAAQ,EACbD,KAAKE,aAAe,EAEpBF,KAAKG,WAAY,EAGjBH,KAAKI,QAAUJ,KAAKI,QAAUJ,KAAKT,OAAOc,OAAS,EAEnDL,KAAKM,eAELN,KAAKO,MAAQ,GAGjBD,aAAc,WAEVN,KAAKE,aAAeF,KAAKV,gBAAkBZ,GAAG8B,cAAgBR,KAAKX,gBAAkBW,KAAKV,iBAC1FU,KAAKC,MAAQ,CAGb,IAAIQ,GAAU/B,GAAGgC,YAAYV,KAAKhB,WAElCgB,MAAKW,KAAKC,SAASH,GAEnBA,EAAQI,YAAYb,KAAKc,qBAEzBL,EAAQM,aAAa,QAAQC,KAAOhB,MAExCc,kBAAmB,WACf,GAAIG,GAAQ,EAERC,EAAQlB,KAAKT,OAASb,GAAG8B,aAAeR,KAAKP,OAAOsB,aAAa,UAAUI,WAAa,GACxFC,EAAOpB,KAAKW,KAAKU,MAAQ,CAG7B,OAFAJ,GAAQvC,GAAG4C,kBAAoBF,EAExB1C,GAAG6C,EAAEN,EAAOC,IAEvBM,UAAW,WACPxB,KAAKO,OAAS,EACdP,KAAKN,aAAa+B,OAAS,SAAWzB,KAAKO,MAAMmB,WAEjDhD,GAAGiD,YAAYC,WAAW5B,KAAKJ,YAAY,IAG/CiC,OAAQ,SAAgBC,GACpB,MAAK9B,MAAKG,UAGNH,KAAKC,MAAQD,KAAKE,iBAClBF,MAAK+B,gBAGT/B,KAAKC,OAAS6B,GAPd,QASJC,SAAU,WACN/B,KAAKG,WAAY,EACjBH,KAAKP,OAAOuC,gBAEZ,IAAIC,GAAgBvD,GAAGgC,YAAYV,KAAKZ,YAExCY,MAAKW,KAAKC,SAASqB,GACnBA,EAAcR,OAAS,WAEvB,IAAIS,GAAUxD,GAAGwD,QAAQ,EAAG,EAAG,GAC3BC,EAAWzD,GAAG0D,SAAS,WACvBH,EAAcI,UACd3D,GAAG4D,SAASC,UAAU,SACvBvC,KAEHiC,GAAcO,UAAU9D,GAAG+D,SAASP,EAASC,OAIrDzD,GAAGgE,cACGC,QAAU,SAASpF,EAAQkB,EAAOJ,GACxCK,GAAGC,QAAQF,EAAQ,0BAA2B,UAK9CC,GAAGE,OACCC,UAAWH,GAAGI,UAEdC,YAUIoC,WAAY,EACZyB,aAAc,EACdC,aAAc,EACdC,MAAO,EACPC,WACI9D,UAAW,KACXY,IAAKnB,GAAGoB,YAIhBkD,cAAe,WAEX,GAAIC,GAASvE,GAAGwE,OAAOlD,KAAK4C,aAAclE,GAAG6C,EAAE,EAAGvB,KAAKmB,aAAagC,OAAOzE,GAAG0E,sBAE1EC,EAAW3E,GAAGwE,OAAOlD,KAAK4C,aAAclE,GAAG6C,EAAE,GAAIvB,KAAKmB,aAAagC,OAAOzE,GAAG0E,sBAE7EjB,EAAWzD,GAAG0D,SAASpC,KAAKsD,cAAetD,KAE/C,OAAOtB,IAAG6E,cAAc7E,GAAG+D,SAASQ,EAAQI,EAAUlB,KAG1DmB,cAAe,WACX5E,GAAGiD,YAAYC,WAAW5B,KAAK+C,WAAW,IAG9CS,gBAAiB,WACb,GAAIC,GAAOzD,IACXtB,IAAGgF,aAAaC,aACZC,MAAOlF,GAAGmF,cAAcC,SACxBC,aAAc,SAAsBC,EAASJ,GACzC,OAAQI,GACJ,IAAKtF,IAAGuF,IAAIlG,EACZ,IAAKW,IAAGuF,IAAIC,KACRT,EAAKU,SAAU,EACfV,EAAKW,UAAW,CAChB,MACJ,KAAK1F,IAAGuF,IAAII,EACZ,IAAK3F,IAAGuF,IAAIK,MACRb,EAAKU,SAAU,EACfV,EAAKW,UAAW,IAI5BG,cAAe,SAAuBP,EAASJ,GAC3C,OAAQI,GACJ,IAAKtF,IAAGuF,IAAIlG,EACZ,IAAKW,IAAGuF,IAAIC,KACRT,EAAKU,SAAU,CACf,MACJ,KAAKzF,IAAGuF,IAAII,EACZ,IAAK3F,IAAGuF,IAAIK,MACRb,EAAKW,UAAW,KAI7BX,EAAK9C,OAIZZ,OAAQ,WACJC,KAAKwE,WAAaxE,KAAKgD,gBACvBhD,KAAKW,KAAK6B,UAAUxC,KAAKwE,YAEzBxE,KAAKoE,UAAW,EAChBpE,KAAKmE,SAAU,EAEfnE,KAAKyE,OAAS,EAEdzE,KAAKwD,mBAIT3B,OAAQ,SAAgBC,GAChB9B,KAAKmE,QACLnE,KAAKyE,QAAUzE,KAAK8C,MAAQhB,EACrB9B,KAAKoE,WACZpE,KAAKyE,QAAUzE,KAAK8C,MAAQhB,GAG5B4C,KAAKC,IAAI3E,KAAKyE,QAAUzE,KAAK6C,eAC7B7C,KAAKyE,OAASzE,KAAK6C,aAAe7C,KAAKyE,OAASC,KAAKC,IAAI3E,KAAKyE,SAGlEzE,KAAKW,KAAKiE,GAAK5E,KAAKyE,OAAS3C,EAC7B+C,QAAQC,IAAI,KAAO9E,KAAKW,KAAKiE,GACzB5E,KAAKW,KAAKiE,EAAI,OACd5E,KAAKW,KAAKiE,EAAI,MAEd5E,KAAKW,KAAKiE,EAAI,MACd5E,KAAKW,KAAKiE,EAAI,QAK1BlG,GAAGgE,cACGqC,MAAQ,SAASxH,EAAQkB,EAAOJ,GACtCK,GAAGC,QAAQF,EAAQ,0BAA2B,QAK9CC,GAAGE,OACCC,UAAWH,GAAGI,UAEdC,YAUIiG,WAAY,GAGhBC,kBAAmB,WAEf,GAAIC,GAAYlF,KAAKgB,KAAKvB,OAAO0F,cAE7BC,EAAO1G,GAAG2G,UAAUrF,KAAKW,KAAK2E,SAAUJ,EAC5C,OAAOE,IAGXG,SAAU,WAENvF,KAAKgB,KAAKV,eACVN,KAAKgB,KAAKQ,YAEVxB,KAAKW,KAAK0B,WAGdtC,OAAQ,aAGR8B,OAAQ,SAAgBC,GAEpB,GAAI9B,KAAKiF,oBAAsBjF,KAAKgF,WAEhC,WADAhF,MAAKuF,UAIT,IAAIC,GAAe,EAAIxF,KAAKgB,KAAKf,MAAQD,KAAKgB,KAAKd,aAC/CuF,EAAa,EACjBzF,MAAKW,KAAK+E,QAAUD,EAAaf,KAAKiB,MAAMH,GAAgB,IAAMC,OAI1E/G,GAAGgE,mBACQ,OAAO,SAAS","file":"project.js","sourcesContent":["require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"Game\":[function(require,module,exports){\ncc._RFpush(module, '1af6fTLuadLjLRllmtxVSdl', 'Game');\n// scripts/Game.js\n\n'use strict';\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        //星星预制资源\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n\n        //label预制资源\n        labelPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        //星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        //地面节点，用于确定星星生成的高度\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n        //player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n        //score label 的引用\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        //初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n\n        this.beginGame = true;\n\n        //获取地面的y坐标\n        this.groundY = this.groundY + this.ground.height / 2;\n        //生成一个新的星星\n        this.spawnNewStar();\n        //初始化得分\n        this.score = 0;\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        //重置计时器\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n\n        //使用给定的模板在场景中生成一个节点\n        var newStar = cc.instantiate(this.starPrefab);\n        //将新增的节点添加到Canvas节点下面\n        this.node.addChild(newStar);\n        //随机设置一个位置\n        newStar.setPosition(this.getNewStarPositon());\n        //将Game组件的实例传入星星组件\n        newStar.getComponent('Star').game = this;\n    },\n    getNewStarPositon: function getNewStarPositon() {\n        var randX = 0;\n        //根据地平面和主角跳跃高度，随机得到一个星星的y坐标\n        var randY = this.ground + cc.random0To1() * this.player.getComponent(\"Player\").jumpHeight + 50;\n        var maxX = this.node.width / 2;\n        randX = cc.randomMinus1To1() * maxX;\n\n        return cc.p(randX, randY);\n    },\n    gainScore: function gainScore() {\n        this.score += 1;\n        this.scoreDisplay.string = 'Score:' + this.score.toString();\n\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (!this.beginGame) {\n            return;\n        }\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n    gameOver: function gameOver() {\n        this.beginGame = false;\n        this.player.stopAllActions(); //停止player的跳跃动作\n\n        var gameoverLabel = cc.instantiate(this.labelPrefab);\n        //将新增的节点添加到Canvas节点下面\n        this.node.addChild(gameoverLabel);\n        gameoverLabel.string = \"Game Over\";\n\n        var scaleTo = cc.scaleTo(2, 0, 0);\n        var callback = cc.callFunc(function () {\n            gameoverLabel.destroy();\n            cc.director.loadScene('game');\n        }, this);\n\n        gameoverLabel.runAction(cc.sequence(scaleTo, callback));\n    }\n});\n\ncc._RFpop();\n},{}],\"Player\":[function(require,module,exports){\ncc._RFpush(module, '6a213D2UFhCJKlLtxgiSqmy', 'Player');\n// scripts/Player.js\n\n\"use strict\";\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        jumpHeight: 0,\n        jumpDuration: 0,\n        maxMoveSpeed: 0,\n        accel: 0,\n        jumpAudio: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    setJumpAction: function setJumpAction() {\n        //上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        //下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionOut());\n\n        var callback = cc.callFunc(this.playJumpSound, this);\n\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function playJumpSound() {\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    setInputControl: function setInputControl() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                    case cc.KEY.left:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                    case cc.KEY.right:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                    case cc.KEY.left:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                    case cc.KEY.right:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        this.accRight = false;\n        this.accLeft = false;\n\n        this.xSpeed = 0;\n\n        this.setInputControl();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        this.node.x += this.xSpeed * dt;\n        console.log(\"x:\" + this.node.x);\n        if (this.node.x < -520) {\n            this.node.x = -520;\n        }\n        if (this.node.x > 520) {\n            this.node.x = 520;\n        }\n    }\n});\n\ncc._RFpop();\n},{}],\"Star\":[function(require,module,exports){\ncc._RFpush(module, 'ddfc6LhV4FJ5JOLn30BHhez', 'Star');\n// scripts/Star.js\n\n\"use strict\";\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        pickRadius: 0\n    },\n\n    getPlayerDistance: function getPlayerDistance() {\n        //this.game是在Game.js中传递过来的\n        var playerPos = this.game.player.getPosition();\n        //根据两点位置计算距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        //当星星被收集事，调用Game脚本中的接口，生成一个星星\n        this.game.spawnNewStar();\n        this.game.gainScore();\n        //然后销毁当前星星节点\n        this.node.destroy();\n    },\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        //判断主角和星星的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            this.onPicked();\n            return;\n        }\n\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    }\n});\n\ncc._RFpop();\n},{}]},{},[\"Game\",\"Player\",\"Star\"]);\n"],"sourceRoot":"/source/"}